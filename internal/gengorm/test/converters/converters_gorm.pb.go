// Code generated by protoc-gen-gorm. DO NOT EDIT.
// versions:
// 	protoc-gen-gorm 1.0.0
// 	protoc          (unknown)
// source: converters/converters.proto

package converters

import (
	sql "database/sql"
	json "encoding/json"
	_ "github.com/complex64/protoc-gen-gorm/gormpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// ScalarsModel is the GORM model for converters.Scalars.
type ScalarsModel struct {
	DoubleField   float64
	FloatField    float32
	Int32Field    int32
	Int64Field    int64
	Uint32Field   uint32
	Uint64Field   uint64
	Sint32Field   int32
	Sint64Field   int64
	Fixed32Field  uint32
	Fixed64Field  uint64
	Sfixed32Field int32
	Sfixed64Field int64
	BoolField     bool
	StringField   string
	BytesField    []byte
}

// ToProto converts a ScalarsModel to its protobuf representation.
func (m *ScalarsModel) ToProto() (*Scalars, error) {
	p := new(Scalars)
	p.DoubleField = m.DoubleField
	p.FloatField = m.FloatField
	p.Int32Field = m.Int32Field
	p.Int64Field = m.Int64Field
	p.Uint32Field = m.Uint32Field
	p.Uint64Field = m.Uint64Field
	p.Sint32Field = m.Sint32Field
	p.Sint64Field = m.Sint64Field
	p.Fixed32Field = m.Fixed32Field
	p.Fixed64Field = m.Fixed64Field
	p.Sfixed32Field = m.Sfixed32Field
	p.Sfixed64Field = m.Sfixed64Field
	p.BoolField = m.BoolField
	p.StringField = m.StringField
	p.BytesField = m.BytesField
	return p, nil
}

// ToModel converts a Scalars to its GORM model.
func (p *Scalars) ToModel() (*ScalarsModel, error) {
	m := new(ScalarsModel)
	m.DoubleField = p.DoubleField
	m.FloatField = p.FloatField
	m.Int32Field = p.Int32Field
	m.Int64Field = p.Int64Field
	m.Uint32Field = p.Uint32Field
	m.Uint64Field = p.Uint64Field
	m.Sint32Field = p.Sint32Field
	m.Sint64Field = p.Sint64Field
	m.Fixed32Field = p.Fixed32Field
	m.Fixed64Field = p.Fixed64Field
	m.Sfixed32Field = p.Sfixed32Field
	m.Sfixed64Field = p.Sfixed64Field
	m.BoolField = p.BoolField
	m.StringField = p.StringField
	m.BytesField = p.BytesField
	return m, nil
}

// KnownTypesModel is the GORM model for converters.KnownTypes.
type KnownTypesModel struct {
	TimestampField sql.NullTime
	WrappedDouble  sql.NullFloat64
	WrappedFloat   sql.NullFloat64
	WrappedInt64   sql.NullInt64
	WrappedUin64   sql.NullInt64
	WrappedInt32   sql.NullInt32
	WrappedUint32  sql.NullInt64
	WrappedBool    sql.NullBool
	WrappedString  sql.NullString
	WrappedBytes   []byte
}

// ToProto converts a KnownTypesModel to its protobuf representation.
func (m *KnownTypesModel) ToProto() (*KnownTypes, error) {
	p := new(KnownTypes)
	if m.TimestampField.Valid {
		p.TimestampField = timestamppb.New(m.TimestampField.Time)
	}
	if m.WrappedDouble.Valid {
		p.WrappedDouble = wrapperspb.Double(m.WrappedDouble.Float64)
	}
	if m.WrappedFloat.Valid {
		p.WrappedFloat = wrapperspb.Float(float32(m.WrappedFloat.Float64))
	}
	if m.WrappedInt64.Valid {
		p.WrappedInt64 = wrapperspb.Int64(m.WrappedInt64.Int64)
	}
	if m.WrappedUin64.Valid {
		p.WrappedUin64 = wrapperspb.UInt64(uint64(m.WrappedUin64.Int64))
	}
	if m.WrappedInt32.Valid {
		p.WrappedInt32 = wrapperspb.Int32(int32(m.WrappedInt32.Int32))
	}
	if m.WrappedUint32.Valid {
		p.WrappedUint32 = wrapperspb.UInt32(uint32(m.WrappedUint32.Int64))
	}
	if m.WrappedBool.Valid {
		p.WrappedBool = wrapperspb.Bool(m.WrappedBool.Bool)
	}
	if m.WrappedString.Valid {
		p.WrappedString = wrapperspb.String(m.WrappedString.String)
	}
	if m.WrappedBytes != nil {
		p.WrappedBytes = wrapperspb.Bytes(m.WrappedBytes)
	}
	return p, nil
}

// ToModel converts a KnownTypes to its GORM model.
func (p *KnownTypes) ToModel() (*KnownTypesModel, error) {
	m := new(KnownTypesModel)
	if t := p.TimestampField; t != nil {
		m.TimestampField = sql.NullTime{
			Valid: true,
			Time:  t.AsTime(),
		}
	}
	if p.WrappedDouble != nil {
		m.WrappedDouble = sql.NullFloat64{
			Valid:   true,
			Float64: p.WrappedDouble.GetValue(),
		}
	}
	if p.WrappedFloat != nil {
		m.WrappedFloat = sql.NullFloat64{
			Valid:   true,
			Float64: float64(p.WrappedFloat.GetValue()),
		}
	}
	if p.WrappedInt64 != nil {
		m.WrappedInt64 = sql.NullInt64{
			Valid: true,
			Int64: p.WrappedInt64.GetValue(),
		}
	}
	if p.WrappedUin64 != nil {
		m.WrappedUin64 = sql.NullInt64{
			Valid: true,
			Int64: int64(p.WrappedUin64.GetValue()),
		}
	}
	if p.WrappedInt32 != nil {
		m.WrappedInt32 = sql.NullInt32{
			Valid: true,
			Int32: p.WrappedInt32.GetValue(),
		}
	}
	if p.WrappedUint32 != nil {
		m.WrappedUint32 = sql.NullInt64{
			Valid: true,
			Int64: int64(p.WrappedUint32.GetValue()),
		}
	}
	if p.WrappedBool != nil {
		m.WrappedBool = sql.NullBool{
			Valid: true,
			Bool:  p.WrappedBool.GetValue(),
		}
	}
	if p.WrappedString != nil {
		m.WrappedString = sql.NullString{
			Valid:  true,
			String: p.WrappedString.GetValue(),
		}
	}
	if p.WrappedBytes != nil {
		m.WrappedBytes = p.WrappedBytes.GetValue()
	}
	return m, nil
}

// EnumModel is the GORM model for converters.Enum.
type EnumModel struct {
	EnumField       int32
	NestedEnumField int32
}

// ToProto converts a EnumModel to its protobuf representation.
func (m *EnumModel) ToProto() (*Enum, error) {
	p := new(Enum)
	p.EnumField = AnEnum(m.EnumField)
	p.NestedEnumField = Enum_ANestedEnum(m.NestedEnumField)
	return p, nil
}

// ToModel converts a Enum to its GORM model.
func (p *Enum) ToModel() (*EnumModel, error) {
	m := new(EnumModel)
	m.EnumField = int32(p.EnumField)
	m.NestedEnumField = int32(p.NestedEnumField)
	return m, nil
}

// JsonModel is the GORM model for converters.Json.
type JsonModel struct {
	MapField []byte
}

// ToProto converts a JsonModel to its protobuf representation.
func (m *JsonModel) ToProto() (*Json, error) {
	p := new(Json)
	if len(m.MapField) > 0 {
		if err := json.Unmarshal(m.MapField, &p.MapField); err != nil {
			return nil, err
		}
	}
	return p, nil
}

// ToModel converts a Json to its GORM model.
func (p *Json) ToModel() (*JsonModel, error) {
	m := new(JsonModel)
	if bs, err := json.Marshal(&p.MapField); err != nil {
		return nil, err
	} else {
		m.MapField = bs
	}
	return m, nil
}
