// Code generated by protoc-gen-gorm. DO NOT EDIT.
// versions:
// 	protoc-gen-gorm v0.0.0
// 	protoc          (unknown)
// source: converters/converters.proto

package converters

import (
	json "encoding/json"
	_ "github.com/complex64/protoc-gen-gorm/gormpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	time "time"
)

// ScalarsModel is the GORM model for converters.Scalars.
type ScalarsModel struct {
	DoubleField   float64
	FloatField    float32
	Int32Field    int32
	Int64Field    int64
	Uint32Field   uint32
	Uint64Field   uint64
	Sint32Field   int32
	Sint64Field   int64
	Fixed32Field  uint32
	Fixed64Field  uint64
	Sfixed32Field int32
	Sfixed64Field int64
	BoolField     bool
	StringField   string
	BytesField    []byte
}

// AsProto converts a ScalarsModel to its protobuf representation.
func (m *ScalarsModel) AsProto() (*Scalars, error) {
	x := new(Scalars)
	x.DoubleField = m.DoubleField
	x.FloatField = m.FloatField
	x.Int32Field = m.Int32Field
	x.Int64Field = m.Int64Field
	x.Uint32Field = m.Uint32Field
	x.Uint64Field = m.Uint64Field
	x.Sint32Field = m.Sint32Field
	x.Sint64Field = m.Sint64Field
	x.Fixed32Field = m.Fixed32Field
	x.Fixed64Field = m.Fixed64Field
	x.Sfixed32Field = m.Sfixed32Field
	x.Sfixed64Field = m.Sfixed64Field
	x.BoolField = m.BoolField
	x.StringField = m.StringField
	x.BytesField = m.BytesField
	return x, nil
}

// AsModel converts a Scalars to its GORM model.
func (x *Scalars) AsModel() (*ScalarsModel, error) {
	m := new(ScalarsModel)
	m.DoubleField = x.DoubleField
	m.FloatField = x.FloatField
	m.Int32Field = x.Int32Field
	m.Int64Field = x.Int64Field
	m.Uint32Field = x.Uint32Field
	m.Uint64Field = x.Uint64Field
	m.Sint32Field = x.Sint32Field
	m.Sint64Field = x.Sint64Field
	m.Fixed32Field = x.Fixed32Field
	m.Fixed64Field = x.Fixed64Field
	m.Sfixed32Field = x.Sfixed32Field
	m.Sfixed64Field = x.Sfixed64Field
	m.BoolField = x.BoolField
	m.StringField = x.StringField
	m.BytesField = x.BytesField
	return m, nil
}

// KnownTypesModel is the GORM model for converters.KnownTypes.
type KnownTypesModel struct {
	TimestampField time.Time
}

// AsProto converts a KnownTypesModel to its protobuf representation.
func (m *KnownTypesModel) AsProto() (*KnownTypes, error) {
	x := new(KnownTypes)
	if m.TimestampField != (time.Time{}) {
		x.TimestampField = timestamppb.New(m.TimestampField)
	}
	return x, nil
}

// AsModel converts a KnownTypes to its GORM model.
func (x *KnownTypes) AsModel() (*KnownTypesModel, error) {
	m := new(KnownTypesModel)
	if t := x.TimestampField; t != nil {
		m.TimestampField = t.AsTime()
	}
	return m, nil
}

// EnumModel is the GORM model for converters.Enum.
type EnumModel struct {
	EnumField       int32
	NestedEnumField int32
}

// AsProto converts a EnumModel to its protobuf representation.
func (m *EnumModel) AsProto() (*Enum, error) {
	x := new(Enum)
	x.EnumField = AnEnum(m.EnumField)
	x.NestedEnumField = Enum_ANestedEnum(m.NestedEnumField)
	return x, nil
}

// AsModel converts a Enum to its GORM model.
func (x *Enum) AsModel() (*EnumModel, error) {
	m := new(EnumModel)
	m.EnumField = int32(x.EnumField)
	m.NestedEnumField = int32(x.NestedEnumField)
	return m, nil
}

// JsonModel is the GORM model for converters.Json.
type JsonModel struct {
	MapField []byte
}

// AsProto converts a JsonModel to its protobuf representation.
func (m *JsonModel) AsProto() (*Json, error) {
	x := new(Json)
	if len(m.MapField) > 0 {
		if err := json.Unmarshal(m.MapField, &x.MapField); err != nil {
			return nil, err
		}
	}
	return x, nil
}

// AsModel converts a Json to its GORM model.
func (x *Json) AsModel() (*JsonModel, error) {
	m := new(JsonModel)
	if bs, err := json.Marshal(&x.MapField); err != nil {
		return nil, err
	} else {
		m.MapField = bs
	}
	return m, nil
}
