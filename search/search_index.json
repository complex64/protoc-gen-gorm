{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p><code>protoc-gen-gorm</code> is a plugin for <code>protoc</code>, the Protocol Buffer (\"proto\") Compiler.</p> <p>The plugin generates GORM v2 models and supporting code, depending on the options you use.</p>"},{"location":"#install","title":"Install","text":"<pre><code>go install github.com/complex64/protoc-gen-gorm@latest\n</code></pre> <ul> <li>TODO: Point to Usage for GHA/containerized</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Targets Gorm v2 (<code>gorm.io/gorm</code>)</li> <li>Generates GORM-compatible model struct types for your message types: <code>UserModel</code> for your <code>User</code> message</li> <li>Generates methods to convert from proto message to model: <code>ToModel()</code> on the proto message, and <code>ToProto()</code> on the model</li> <li>Generates CRUD helper methods: <code>Create()</code>, <code>Get()</code>, <code>List()</code>, <code>Update()</code>, <code>Patch()</code>, and <code>Delete()</code></li> <li>Encode fields as JSON strings</li> </ul>"},{"location":"#usage","title":"Usage","text":"<ul> <li>TODO: protoc</li> <li>TODO: buf</li> <li>TODO: GHA</li> </ul>"},{"location":"#about","title":"About","text":"<ul> <li>TODO: Repeat notes from README</li> </ul>"},{"location":"automation/","title":"Automate with GitHub Actions and <code>buf</code>","text":"<p>TODO: Tutorial on how to automate: Lint, validate, compile (with protoc-gen-gorm), and pull-request on change to your proto files.</p>"},{"location":"options/","title":"Options","text":"<p>Options control what <code>protoc-gen-gorm</code> does. You set them in your <code>.proto</code> files, as regular Protocol Buffer Options.</p> <p>The plugin does nothing by default, you'll have to flag some of your messages to be models first, e.g. set <code>model</code> to <code>true</code>.</p>"},{"location":"options/#file-options","title":"File Options","text":"<p>File options apply to all message types within the <code>.proto</code> file.</p>"},{"location":"options/#model","title":"model","text":"<p>Sets <code>model</code> for all messages in the file. See <code>model</code> below.</p> <p>Default: <code>false</code></p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\noption (gorm.file).model = true;\n</code></pre>"},{"location":"options/#validate","title":"validate","text":"<p>Sets <code>validate</code> for all messages in the file. See <code>validate</code> below.</p> <p>Default: <code>false</code></p> <p>Implies <code>model = true</code> when set to <code>true</code>.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\noption (gorm.file).validate = true;\n</code></pre>"},{"location":"options/#crud","title":"crud","text":"<p>Sets <code>crud</code> for all messages in the file. See <code>crud</code> below.</p> <p>Default: <code>false</code></p> <p>Implies <code>model = true</code> when set to <code>true</code>.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\noption (gorm.file).crud = true;\n</code></pre>"},{"location":"options/#message-options","title":"Message Options","text":"<p>Message options control generation of model and supporting code for your message types.</p>"},{"location":"options/#model_1","title":"model","text":"<p>Marks a message as a model so <code>protoc-gen-gorm</code> generates a Go struct and converter methods for use with GORM v2.</p> <p>The struct type name is the message's name with \"Model\" appended.</p> <p>Default: <code>false</code></p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n}\n</code></pre> <p>Generates:</p> <pre><code>package mypackage\n\ntype MyMessageModel struct{ /* ... */ }\n\nfunc (m *MyMessageModel) ToProto() (*MyMessage, error) { /* ... */ }\nfunc (p *MyMessage) ToModel() (*MyMessageModel, error) { /* ... */ }\n</code></pre>"},{"location":"options/#validate_1","title":"validate","text":"<p>TODO</p> <p>Default: <code>false</code></p> <p>Implies <code>model = true</code> when set to <code>true</code>.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).validate = true;\n}\n</code></pre>"},{"location":"options/#crud_1","title":"crud","text":"<p>Generates supporting types and methods to implement CRUD for your model.</p> <p>Default: <code>false</code></p> <p>Implies <code>model = true</code> when set to <code>true</code>.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).crud = true;\n}\n</code></pre> <p>Generates:</p> <pre><code>package mypackage\n\ntype MyMessageWithDB struct{ /* ... */ }\ntype CrudGetOption\ntype CrudListOption\n\n// Attach a GORM DB handle to your message.\nfunc (p *MyMessage) WithDB(db *gorm.DB) MyMessageWithDB\n\n// CRUD support without need to convert to model type and back.\nfunc (c MyMessageWithDB) Create(context.Context) (*MyMessage, error)\nfunc (c MyMessageWithDB) Get(context.Context, opts ...MyMessageGetOption) (*MyMessage, error)\nfunc (c MyMessageWithDB) List(context.Context, opts ...MyMessageListOption) ([]*MyMessage, error)\nfunc (c MyMessageWithDB) Update(context.Context) (*MyMessage, error)\nfunc (c MyMessageWithDB) Patch(context.Context, mask *fieldmaskpb.FieldMask) error\nfunc (c MyMessageWithDB) Delete(context.Context) error \n</code></pre>"},{"location":"options/#table","title":"table","text":"<p>Set the table name for models of this type.</p> <p>Default: Unset, uses the GORM default.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message) = {\n    model: true,\n    table: \"mytable\"\n  };\n}\n</code></pre> <p>The generated struct now implements GORM's Tabler interface:</p> <pre><code>package mypackage\n\ntype MyMessageModel struct {\n    // ...\n}\n\nfunc (m *MyMessageModel) TableName() string {\n    return \"mytable\"\n}\n</code></pre>"},{"location":"options/#field-options","title":"Field Options","text":"<p>Field options refine how your generated model works with GORM through struct field tags and supporting code.</p>"},{"location":"options/#column","title":"column","text":"<p>Sets the database column name.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n\n  string my_field = 1 [\n    (gorm.field).column = \"my_column\"\n  ];\n}\n</code></pre> <p>Equivalent GORM struct field tag:</p> <pre><code>package mypackage\n\ntype MyMessageModel struct {\n    MyField string `gorm:\"column:my_column\"`\n}\n</code></pre>"},{"location":"options/#not_null","title":"not_null","text":"<p>Specifies the field's column as \"NOT NULL\". See \"not null\" under GORM: Field Tags.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n\n  string my_field = 1 [\n    (gorm.field).not_null = true\n  ];\n}\n</code></pre> <p>Equivalent GORM struct field tag:</p> <pre><code>package mypackage\n\ntype MyMessageModel struct {\n    MyField string `gorm:\"not null\"`\n}\n</code></pre>"},{"location":"options/#default","title":"default","text":"<p>Sets the default value for the field's column. See \"default\" under GORM: Field Tags.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n\n  string my_field = 1 [\n    (gorm.field).default = \"a default value\"\n  ];\n}\n</code></pre> <p>Equivalent GORM struct field tag:</p> <pre><code>package mypackage\n\ntype MyMessageModel struct {\n    MyField string `gorm:\"default:\\\"a default value\\\"\"`\n}\n</code></pre>"},{"location":"options/#unique","title":"unique","text":"<p>Flags the field's column to be indexed with a unique indep. See GORM: Indexes.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n\n  string my_field = 1 [\n    (gorm.field).unique = true\n  ];\n}\n</code></pre> <p>Equivalent GORM struct field tag:</p> <pre><code>package mypackage\n\ntype MyMessageModel struct {\n    MyField string `gorm:\"uniqueIndex\"`\n}\n</code></pre>"},{"location":"options/#primary_key","title":"primary_key","text":"<p>Makes the field a primary key.</p> <p>Also see:</p> <ul> <li>GORM: ID as Primary Key</li> <li>GORM: Composite Primary Key</li> </ul> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n\n  string uuid = 1 [\n    (gorm.field).primary_key = true\n  ];\n}\n</code></pre> <p>Equivalent GORM struct field tag:</p> <pre><code>package mypackage\n\ntype MyMessageModel struct {\n    Uuid string `gorm:\"primaryKey\"`\n}\n</code></pre>"},{"location":"options/#index","title":"index","text":"<p>Adds an index to a field. Composite and multiple indexes are possible.</p>"},{"location":"options/#default_1","title":"default","text":"<p>Use defaults for the index, e.g. name, type, etc.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n\n  string my_field = 1 [\n    (gorm.field).index = {default: true}\n  ];\n}\n</code></pre> <p>Equivalent GORM struct field tag:</p> <pre><code>package mypackage\n\ntype MyMessageModel struct {\n    MyField string `gorm:\"index\"`\n}\n</code></pre>"},{"location":"options/#name","title":"name","text":"<p>Gives the index a custom name.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n\n  string my_field = 1 [\n    (gorm.field).index = {name: \"my_index_name\"}\n  ];\n}\n</code></pre> <p>Equivalent GORM struct field tag:</p> <pre><code>package mypackage\n\ntype MyMessageModel struct {\n    MyField string `gorm:\"index:my_index_name\"`\n}\n</code></pre>"},{"location":"options/#unique_index","title":"unique_index","text":"<p>Same as <code>index</code> above except that the index is unique.</p>"},{"location":"options/#default_2","title":"default","text":"<p>Use defaults for the unique index, e.g. name, type, etc.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n\n  string my_field = 1 [\n    (gorm.field).unique_index = {default: true}\n  ];\n}\n</code></pre> <p>Equivalent GORM struct field tag:</p> <pre><code>package mypackage\n\ntype MyMessageModel struct {\n    MyField string `gorm:\"uniqueIndex\"`\n}\n</code></pre>"},{"location":"options/#name_1","title":"name","text":"<p>Gives the unique index a custom name.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n\n  string my_field = 1 [\n    (gorm.field).unique_index = {name: \"my_index_name\"}\n  ];\n}\n</code></pre> <p>Equivalent GORM struct field tag:</p> <pre><code>package mypackage\n\ntype MyMessageModel struct {\n    MyField string `gorm:\"uniqueIndex:my_index_name\"`\n}\n</code></pre>"},{"location":"options/#auto_create_time","title":"auto_create_time","text":"<p>Instructs GORM to track creation time in the flagged field.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"google/protobuf/timestamp.proto\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n\n  google.protobuf.Timestamp my_time = 1 [\n    (gorm.field).auto_create_time = true\n  ];\n}\n</code></pre> <p>Equivalent GORM struct field tag:</p> <pre><code>package mypackage\n\nimport (\n    \"database/sql\"\n)\n\ntype MyMessageModel struct {\n    MyTime sql.NullTime `gorm:\"autoCreateTime\"`\n}\n</code></pre>"},{"location":"options/#auto_update_time","title":"auto_update_time","text":"<p>Instructs GORM to track update time in the flagged field.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"google/protobuf/timestamp.proto\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n\n  google.protobuf.Timestamp my_time = 1 [\n    (gorm.field).auto_update_time = true\n  ];\n}\n</code></pre> <p>Equivalent GORM struct field tag:</p> <pre><code>package mypackage\n\nimport (\n    \"database/sql\"\n)\n\ntype MyMessageModel struct {\n    MyTime sql.NullTime `gorm:\"autoUpdateTime\"`\n}\n</code></pre>"},{"location":"options/#permissions","title":"permissions","text":"<p>Sets the field level permissions to turn columns into read-only, write-only, create-only, update-only or to ignore a column entirely.</p>"},{"location":"options/#ignore","title":"ignore","text":"<p>Ignores the column entirely.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n\n  string my_ignored_field = 1 [\n    (gorm.field).ignore = true\n  ];\n}\n</code></pre> <p>Equivalent GORM struct field tag:</p> <pre><code>package mypackage\n\ntype MyMessageModel struct {\n    MyField string `gorm:\"-\"`\n}\n</code></pre>"},{"location":"options/#deny","title":"deny","text":"<p>Restricts access to a field. Multiple \"denys\" can be combined to the desired effect.</p>"},{"location":"options/#create","title":"create","text":"<p>Prevent creation, still allows reads and updates.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n\n  string my_field = 1 [\n    (gorm.field).deny = {create: true}\n  ];\n}\n</code></pre> <p>Equivalent GORM struct field tag:</p> <pre><code>package mypackage\n\ntype MyMessageModel struct {\n    MyField string `gorm:\"&lt;-:update\"`\n}\n</code></pre>"},{"location":"options/#update","title":"update","text":"<p>Prevent updates, still allows creation and reads.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n\n  string my_field = 1 [\n    (gorm.field).deny = {update: true}\n  ];\n}\n</code></pre> <p>Equivalent GORM struct field tag:</p> <pre><code>package mypackage\n\ntype MyMessageModel struct {\n    MyField string `gorm:\"&lt;-:create\"`\n}\n</code></pre>"},{"location":"options/#read","title":"read","text":"<p>Prevent reads, still allows writes.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n\n  string my_field = 1 [\n    (gorm.field).deny = {read: true}\n  ];\n}\n</code></pre> <p>Equivalent GORM struct field tag:</p> <pre><code>package mypackage\n\ntype MyMessageModel struct {\n    MyField string `gorm:\"-&gt;:false;&lt;-\"`\n}\n</code></pre>"},{"location":"options/#json","title":"json","text":"<p>Encode and decode the field as JSON strings.</p> <p>The converter methods, <code>MyMessageModel.ToProto()</code> and <code>MyMessage.ToModel()</code> in this case, call <code>json.Unmarshal</code> and <code>json.Marshal</code> respectively to decode the field's contents.</p> <p>Example:</p> <pre><code>syntax = \"proto3\";\nimport \"gorm/options.proto\";\npackage mypackage;\n\nmessage MyMessage {\n  option (gorm.message).model = true;\n\n  map&lt;string, string&gt; my_map = 1 [\n    (gorm.field).json = true\n  ];\n}\n</code></pre>"}]}